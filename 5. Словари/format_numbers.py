"""
Напиши программу, которая принимает на вход телефон и стандартизирует его, печатая в стандартизированном виде.
Формат телефона, который должен быть на выходе: 8 (9xx) xxx-xx-xx, например, 8 (901) 123-45-67.

Форматы телефонов на входе:
1. 89xxxxxxxxx, например, 89011234567
2. 9xxxxxxxxx — пропущена первая 7 или 8, например, 9011234567
3. 79xxxxxxxxx, например, 79011234567
4. +79xxxxxxxxx, например, +79011234567
5. форматы выше с любыми нечисловыми символами в строке, например:
8 __()-! 901-123-45-67,
+7901-123-45   67,
#@!(zz8901-___123-45gg67 какая-то ещё петрушка R$&*z и тп.
Все нечисловые символы должны быть проигнорированы при анализе телефонного номера, после очистки номер должен
совпасть по формату с одним из шаблонов, перечисленных в 1-4 пунктах.

Если телефон не подходит по формату ничему перечисленному, программа выводит на печать исходный телефон,
в котором оставлены только цифры.
"""

def format_numbers(phone_number: str) -> str:
    return '8 ({0}{1}{2}) {3}{4}{5}-{6}{7}-{8}{9}'.format(*[i for i in phone_number if i.isdigit()][1:])

numbers = input().strip().replace('(','').replace(')','').replace(' ','').replace('-','')
if numbers[0] == '9':
    numbers = '8 (9' + numbers[1:]
    print(format_numbers(numbers))
elif numbers[:2] == '79':
    numbers = '8 (9' + numbers[2:]
    print(format_numbers(numbers))
elif numbers[:3] == '+79':
    numbers = '8 (9' + numbers[3:]
    print(format_numbers(numbers))
elif '8' in numbers[:3] or '7' in numbers[:3] or '9' in numbers[:3]:
    print(format_numbers(numbers))
else:
    print(numbers)